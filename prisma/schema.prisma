// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User_Details{
  userId Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  phoneNumber String
  address String
  roleId Int @default(2)
  role Roles @relation(fields: [roleId],references: [roleId],onDelete: SetDefault,onUpdate: Cascade)

  employee Employee? 
  orders Order[]
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roles{
  roleId Int @id @default(autoincrement())
  role String
  employee Employee[]
  user User_Details[]

}

model Employee{
  employeeId Int @id @default(autoincrement())
  userId Int @unique
  user User_Details @relation(fields: [userId],references: [userId],onDelete: Cascade,onUpdate: Cascade)
  employeeRoleId Int
  role Roles @relation(fields: [employeeRoleId],references: [roleId],onDelete: NoAction,onUpdate: NoAction) 
}

model Menu_Category{
  categoryId Int @id @default(autoincrement())
  categoryName String @unique
  description String
  menuItem Menu_Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Menu_Item{
  itemId Int @id @default(autoincrement())
  itemName String @unique
  description String
  categoryId Int?
  category Menu_Category? @relation(fields: [categoryId],references: [categoryId])
  price Decimal
  isAvailable Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  orderItems Order_Item[]
}

model Payment_Status{
  statusId Int @id @default(autoincrement())
  statusName String
  payments Payment[]
}

model Order {
  orderId Int  @id @default(autoincrement())
  userId Int?
  user User_Details? @relation(fields: [userId], references: [userId],onDelete: Cascade)  
  totalOrderAmount Decimal  @default(0)
  orderItems Order_Item[]
  payments Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  paymentId Int @id @default(autoincrement())
  orderId Int?
  order Order? @relation(fields: [orderId],references: [orderId],onDelete: Cascade )        
  paymentStatusId Int
  paymentStatus Payment_Status @relation(fields: [paymentStatusId], references: [statusId])
  reservationId Int?
  Reservation Reservation? @relation(fields: [reservationId],references: [reservationId],onUpdate: NoAction,onDelete: NoAction)
  createdAt DateTime   @default(now())
}

model Order_Item{
  orderItemId Int @id @default(autoincrement())
  orderId Int
  order Order @relation(fields: [orderId],references: [orderId],onDelete: Cascade)
  menuItemId Int?
  menuItem Menu_Item? @relation(fields: [menuItemId],references: [itemId])
  quantity Int
  price Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Inventory{
  inventoryItemId Int @id @default(autoincrement())
  inventoryItemName String @unique
  quantity Int 
  unit String
  restoreLevel Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Tables{
  tableId Int @id @default(autoincrement())
  tableName String 
  capacity Int 
  status String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  reservation Reservation[]
}

model Reservation{
  reservationId Int @id @default(autoincrement())
  userId Int
  user User_Details @relation(fields: [userId],references: [userId])
  tableId Int
  table Tables @relation(fields: [tableId],references: [tableId])
  members Int?
  reservationStatus String? 
  payment Payment[] 
}

